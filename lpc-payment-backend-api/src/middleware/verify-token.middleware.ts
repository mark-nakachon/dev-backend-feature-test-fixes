import {
  Injectable,
  NestMiddleware,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { Request, Response } from 'express';
import { get } from 'config';
import * as CognitoExpress from 'cognito-express';

/**
 * Middleware for perform verification on JWT token generated by AWS cognito.
 */
@Injectable()
export class VerifyTokenMiddleware implements NestMiddleware {
  // cognitoExpress
  private cognitoExpress: CognitoExpress;

  constructor() {
    this.cognitoExpress = new CognitoExpress({
      region: get('COGNITO_REGION'),
      cognitoUserPoolId: get('COGNITO_USER_POOL_ID'),
      tokenUse: get('TOKEN_USE'),
    });
  }

  use(req: Request, res: Response, next: (err?: any, res?: any) => void) {
    if (!req.headers['x-tenant-id']) {
      throw new HttpException('Tenant Id is missing', HttpStatus.UNAUTHORIZED);
    }

    let token = req.headers.authorization;

    if (!token) {
      throw new HttpException('Token is missing', HttpStatus.UNAUTHORIZED);
    }

    if (!token.startsWith('Bearer')) {
      throw new HttpException(
        'Invalid token: Token is not Bearer JWT',
        HttpStatus.UNAUTHORIZED,
      );
    }

    token = token.replace('Bearer ', '');

    this.cognitoExpress.validate(token, (err, decoded) => {
      if (err) {
        next(new HttpException(err.message || err, HttpStatus.UNAUTHORIZED));
      } else {
        // tslint:disable-next-line
        req['decoded'] = decoded;
        next();
      }
    });
  }
}
